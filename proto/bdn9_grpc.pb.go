// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BDN9ServiceClient is the client API for BDN9Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BDN9ServiceClient interface {
	SetRGBMode(ctx context.Context, in *SetRGBModeRequest, opts ...grpc.CallOption) (*SetRGBModeReply, error)
	SetMatrixHSV(ctx context.Context, in *SetMatrixHSVRequest, opts ...grpc.CallOption) (*SetMatrixHSVReply, error)
	ToggleMatrix(ctx context.Context, in *ToggleMatrixRequest, opts ...grpc.CallOption) (*ToggleMatrixReply, error)
	SetIndicatorHSV(ctx context.Context, in *SetIndicatorHSVRequest, opts ...grpc.CallOption) (*SetIndicatorHSVReply, error)
	ToggleIndicator(ctx context.Context, in *ToggleIndicatorRequest, opts ...grpc.CallOption) (*ToggleIndicatorReply, error)
	EnableIndicator(ctx context.Context, in *EnableIndicatorRequest, opts ...grpc.CallOption) (*EnableIndicatorReply, error)
	DisableIndicator(ctx context.Context, in *DisableIndicatorRequest, opts ...grpc.CallOption) (*DisableIndicatorReply, error)
	ActivateLayer(ctx context.Context, in *ActivateLayerRequest, opts ...grpc.CallOption) (*ActivateLayerReply, error)
	SetSpeed(ctx context.Context, in *SetSpeedRequest, opts ...grpc.CallOption) (*SetSpeedReply, error)
	SetMuteStatus(ctx context.Context, in *SetMuteStatusRequest, opts ...grpc.CallOption) (*SetMuteStatusReply, error)
	EndCall(ctx context.Context, in *EndCallRequest, opts ...grpc.CallOption) (*EndCallReply, error)
	Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetReply, error)
}

type bDN9ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBDN9ServiceClient(cc grpc.ClientConnInterface) BDN9ServiceClient {
	return &bDN9ServiceClient{cc}
}

func (c *bDN9ServiceClient) SetRGBMode(ctx context.Context, in *SetRGBModeRequest, opts ...grpc.CallOption) (*SetRGBModeReply, error) {
	out := new(SetRGBModeReply)
	err := c.cc.Invoke(ctx, "/BDN9Service/SetRGBMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bDN9ServiceClient) SetMatrixHSV(ctx context.Context, in *SetMatrixHSVRequest, opts ...grpc.CallOption) (*SetMatrixHSVReply, error) {
	out := new(SetMatrixHSVReply)
	err := c.cc.Invoke(ctx, "/BDN9Service/SetMatrixHSV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bDN9ServiceClient) ToggleMatrix(ctx context.Context, in *ToggleMatrixRequest, opts ...grpc.CallOption) (*ToggleMatrixReply, error) {
	out := new(ToggleMatrixReply)
	err := c.cc.Invoke(ctx, "/BDN9Service/ToggleMatrix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bDN9ServiceClient) SetIndicatorHSV(ctx context.Context, in *SetIndicatorHSVRequest, opts ...grpc.CallOption) (*SetIndicatorHSVReply, error) {
	out := new(SetIndicatorHSVReply)
	err := c.cc.Invoke(ctx, "/BDN9Service/SetIndicatorHSV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bDN9ServiceClient) ToggleIndicator(ctx context.Context, in *ToggleIndicatorRequest, opts ...grpc.CallOption) (*ToggleIndicatorReply, error) {
	out := new(ToggleIndicatorReply)
	err := c.cc.Invoke(ctx, "/BDN9Service/ToggleIndicator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bDN9ServiceClient) EnableIndicator(ctx context.Context, in *EnableIndicatorRequest, opts ...grpc.CallOption) (*EnableIndicatorReply, error) {
	out := new(EnableIndicatorReply)
	err := c.cc.Invoke(ctx, "/BDN9Service/EnableIndicator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bDN9ServiceClient) DisableIndicator(ctx context.Context, in *DisableIndicatorRequest, opts ...grpc.CallOption) (*DisableIndicatorReply, error) {
	out := new(DisableIndicatorReply)
	err := c.cc.Invoke(ctx, "/BDN9Service/DisableIndicator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bDN9ServiceClient) ActivateLayer(ctx context.Context, in *ActivateLayerRequest, opts ...grpc.CallOption) (*ActivateLayerReply, error) {
	out := new(ActivateLayerReply)
	err := c.cc.Invoke(ctx, "/BDN9Service/ActivateLayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bDN9ServiceClient) SetSpeed(ctx context.Context, in *SetSpeedRequest, opts ...grpc.CallOption) (*SetSpeedReply, error) {
	out := new(SetSpeedReply)
	err := c.cc.Invoke(ctx, "/BDN9Service/SetSpeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bDN9ServiceClient) SetMuteStatus(ctx context.Context, in *SetMuteStatusRequest, opts ...grpc.CallOption) (*SetMuteStatusReply, error) {
	out := new(SetMuteStatusReply)
	err := c.cc.Invoke(ctx, "/BDN9Service/SetMuteStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bDN9ServiceClient) EndCall(ctx context.Context, in *EndCallRequest, opts ...grpc.CallOption) (*EndCallReply, error) {
	out := new(EndCallReply)
	err := c.cc.Invoke(ctx, "/BDN9Service/EndCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bDN9ServiceClient) Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetReply, error) {
	out := new(ResetReply)
	err := c.cc.Invoke(ctx, "/BDN9Service/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BDN9ServiceServer is the server API for BDN9Service service.
// All implementations must embed UnimplementedBDN9ServiceServer
// for forward compatibility
type BDN9ServiceServer interface {
	SetRGBMode(context.Context, *SetRGBModeRequest) (*SetRGBModeReply, error)
	SetMatrixHSV(context.Context, *SetMatrixHSVRequest) (*SetMatrixHSVReply, error)
	ToggleMatrix(context.Context, *ToggleMatrixRequest) (*ToggleMatrixReply, error)
	SetIndicatorHSV(context.Context, *SetIndicatorHSVRequest) (*SetIndicatorHSVReply, error)
	ToggleIndicator(context.Context, *ToggleIndicatorRequest) (*ToggleIndicatorReply, error)
	EnableIndicator(context.Context, *EnableIndicatorRequest) (*EnableIndicatorReply, error)
	DisableIndicator(context.Context, *DisableIndicatorRequest) (*DisableIndicatorReply, error)
	ActivateLayer(context.Context, *ActivateLayerRequest) (*ActivateLayerReply, error)
	SetSpeed(context.Context, *SetSpeedRequest) (*SetSpeedReply, error)
	SetMuteStatus(context.Context, *SetMuteStatusRequest) (*SetMuteStatusReply, error)
	EndCall(context.Context, *EndCallRequest) (*EndCallReply, error)
	Reset(context.Context, *ResetRequest) (*ResetReply, error)
	mustEmbedUnimplementedBDN9ServiceServer()
}

// UnimplementedBDN9ServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBDN9ServiceServer struct {
}

func (UnimplementedBDN9ServiceServer) SetRGBMode(context.Context, *SetRGBModeRequest) (*SetRGBModeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRGBMode not implemented")
}
func (UnimplementedBDN9ServiceServer) SetMatrixHSV(context.Context, *SetMatrixHSVRequest) (*SetMatrixHSVReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMatrixHSV not implemented")
}
func (UnimplementedBDN9ServiceServer) ToggleMatrix(context.Context, *ToggleMatrixRequest) (*ToggleMatrixReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleMatrix not implemented")
}
func (UnimplementedBDN9ServiceServer) SetIndicatorHSV(context.Context, *SetIndicatorHSVRequest) (*SetIndicatorHSVReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIndicatorHSV not implemented")
}
func (UnimplementedBDN9ServiceServer) ToggleIndicator(context.Context, *ToggleIndicatorRequest) (*ToggleIndicatorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleIndicator not implemented")
}
func (UnimplementedBDN9ServiceServer) EnableIndicator(context.Context, *EnableIndicatorRequest) (*EnableIndicatorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableIndicator not implemented")
}
func (UnimplementedBDN9ServiceServer) DisableIndicator(context.Context, *DisableIndicatorRequest) (*DisableIndicatorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableIndicator not implemented")
}
func (UnimplementedBDN9ServiceServer) ActivateLayer(context.Context, *ActivateLayerRequest) (*ActivateLayerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateLayer not implemented")
}
func (UnimplementedBDN9ServiceServer) SetSpeed(context.Context, *SetSpeedRequest) (*SetSpeedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSpeed not implemented")
}
func (UnimplementedBDN9ServiceServer) SetMuteStatus(context.Context, *SetMuteStatusRequest) (*SetMuteStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMuteStatus not implemented")
}
func (UnimplementedBDN9ServiceServer) EndCall(context.Context, *EndCallRequest) (*EndCallReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndCall not implemented")
}
func (UnimplementedBDN9ServiceServer) Reset(context.Context, *ResetRequest) (*ResetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedBDN9ServiceServer) mustEmbedUnimplementedBDN9ServiceServer() {}

// UnsafeBDN9ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BDN9ServiceServer will
// result in compilation errors.
type UnsafeBDN9ServiceServer interface {
	mustEmbedUnimplementedBDN9ServiceServer()
}

func RegisterBDN9ServiceServer(s grpc.ServiceRegistrar, srv BDN9ServiceServer) {
	s.RegisterService(&BDN9Service_ServiceDesc, srv)
}

func _BDN9Service_SetRGBMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRGBModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BDN9ServiceServer).SetRGBMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BDN9Service/SetRGBMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BDN9ServiceServer).SetRGBMode(ctx, req.(*SetRGBModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BDN9Service_SetMatrixHSV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMatrixHSVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BDN9ServiceServer).SetMatrixHSV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BDN9Service/SetMatrixHSV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BDN9ServiceServer).SetMatrixHSV(ctx, req.(*SetMatrixHSVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BDN9Service_ToggleMatrix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleMatrixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BDN9ServiceServer).ToggleMatrix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BDN9Service/ToggleMatrix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BDN9ServiceServer).ToggleMatrix(ctx, req.(*ToggleMatrixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BDN9Service_SetIndicatorHSV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIndicatorHSVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BDN9ServiceServer).SetIndicatorHSV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BDN9Service/SetIndicatorHSV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BDN9ServiceServer).SetIndicatorHSV(ctx, req.(*SetIndicatorHSVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BDN9Service_ToggleIndicator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleIndicatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BDN9ServiceServer).ToggleIndicator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BDN9Service/ToggleIndicator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BDN9ServiceServer).ToggleIndicator(ctx, req.(*ToggleIndicatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BDN9Service_EnableIndicator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableIndicatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BDN9ServiceServer).EnableIndicator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BDN9Service/EnableIndicator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BDN9ServiceServer).EnableIndicator(ctx, req.(*EnableIndicatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BDN9Service_DisableIndicator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableIndicatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BDN9ServiceServer).DisableIndicator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BDN9Service/DisableIndicator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BDN9ServiceServer).DisableIndicator(ctx, req.(*DisableIndicatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BDN9Service_ActivateLayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateLayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BDN9ServiceServer).ActivateLayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BDN9Service/ActivateLayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BDN9ServiceServer).ActivateLayer(ctx, req.(*ActivateLayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BDN9Service_SetSpeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSpeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BDN9ServiceServer).SetSpeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BDN9Service/SetSpeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BDN9ServiceServer).SetSpeed(ctx, req.(*SetSpeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BDN9Service_SetMuteStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMuteStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BDN9ServiceServer).SetMuteStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BDN9Service/SetMuteStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BDN9ServiceServer).SetMuteStatus(ctx, req.(*SetMuteStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BDN9Service_EndCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BDN9ServiceServer).EndCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BDN9Service/EndCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BDN9ServiceServer).EndCall(ctx, req.(*EndCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BDN9Service_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BDN9ServiceServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BDN9Service/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BDN9ServiceServer).Reset(ctx, req.(*ResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BDN9Service_ServiceDesc is the grpc.ServiceDesc for BDN9Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BDN9Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BDN9Service",
	HandlerType: (*BDN9ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetRGBMode",
			Handler:    _BDN9Service_SetRGBMode_Handler,
		},
		{
			MethodName: "SetMatrixHSV",
			Handler:    _BDN9Service_SetMatrixHSV_Handler,
		},
		{
			MethodName: "ToggleMatrix",
			Handler:    _BDN9Service_ToggleMatrix_Handler,
		},
		{
			MethodName: "SetIndicatorHSV",
			Handler:    _BDN9Service_SetIndicatorHSV_Handler,
		},
		{
			MethodName: "ToggleIndicator",
			Handler:    _BDN9Service_ToggleIndicator_Handler,
		},
		{
			MethodName: "EnableIndicator",
			Handler:    _BDN9Service_EnableIndicator_Handler,
		},
		{
			MethodName: "DisableIndicator",
			Handler:    _BDN9Service_DisableIndicator_Handler,
		},
		{
			MethodName: "ActivateLayer",
			Handler:    _BDN9Service_ActivateLayer_Handler,
		},
		{
			MethodName: "SetSpeed",
			Handler:    _BDN9Service_SetSpeed_Handler,
		},
		{
			MethodName: "SetMuteStatus",
			Handler:    _BDN9Service_SetMuteStatus_Handler,
		},
		{
			MethodName: "EndCall",
			Handler:    _BDN9Service_EndCall_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _BDN9Service_Reset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bdn9.proto",
}
